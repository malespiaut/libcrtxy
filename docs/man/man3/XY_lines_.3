.TH "Line collection manipulation." 3 "25 Dec 2008" "libcrtxy" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Line collection manipulation. \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBXY_lines\fP * \fBXY_new_lines\fP (void)"
.br
.RI "\fICreate a new line collection. \fP"
.ti -1c
.RI "\fBXY_lines\fP * \fBXY_duplicate_lines\fP (\fBXY_lines\fP *lines)"
.br
.RI "\fIDuplicates a collection. \fP"
.ti -1c
.RI "\fBXY_bool\fP \fBXY_free_lines\fP (\fBXY_lines\fP *lines)"
.br
.RI "\fIFree a line collection. \fP"
.ti -1c
.RI "\fBXY_bool\fP \fBXY_start_lines\fP (\fBXY_lines\fP *lines)"
.br
.RI "\fIReset a line collection so that it contains no lines. \fP"
.ti -1c
.RI "\fBXY_bool\fP \fBXY_add_line\fP (\fBXY_lines\fP *lines, \fBXY_fixed\fP x1, \fBXY_fixed\fP y1, \fBXY_fixed\fP x2, \fBXY_fixed\fP y2, \fBXY_color\fP color, \fBXY_fixed\fP thickness)"
.br
.RI "\fIAdd a line to a line collection. \fP"
.ti -1c
.RI "\fBXY_bool\fP \fBXY_translate_lines\fP (\fBXY_lines\fP *lines, \fBXY_fixed\fP x, \fBXY_fixed\fP y)"
.br
.RI "\fITranslate all lines within a collection. \fP"
.ti -1c
.RI "\fBXY_bool\fP \fBXY_scale_lines\fP (\fBXY_lines\fP *lines, \fBXY_fixed\fP xscale, \fBXY_fixed\fP yscale)"
.br
.RI "\fIScale all lines within a collection (centered around the origin (0,0)). \fP"
.ti -1c
.RI "\fBXY_bool\fP \fBXY_rotate_lines\fP (\fBXY_lines\fP *lines, int angle)"
.br
.RI "\fIRotate all lines within a collection (centered around the origin (0,0)). \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBXY_lines\fP* XY_new_lines (void)"
.PP
Create a new line collection. 
.PP
\fBReturns:\fP
.RS 4
a new \fBXY_lines\fP pointer, with no lines. 
.RE
.PP

.SS "\fBXY_lines\fP* XY_duplicate_lines (\fBXY_lines\fP * lines)"
.PP
Duplicates a collection. 
.PP
\fBParameters:\fP
.RS 4
\fIlines\fP is an \fBXY_lines\fP pointer from which you want to copy. 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to a new \fBXY_lines\fP with all lines from 'lines' copied to it on success, or NULL on failure, and sets error code to one of the following: 
.PD 0

.IP "\(bu" 2
\fBXY_ERR_MEM_CANT_ALLOC\fP 
.PP
.RE
.PP

.SS "\fBXY_bool\fP XY_free_lines (\fBXY_lines\fP * lines)"
.PP
Free a line collection. 
.PP
\fBParameters:\fP
.RS 4
\fIlines\fP is an \fBXY_lines\fP pointer to free. (Do not use the pointer any more! You may reuse your variable, if you create a new bitmap, of course.) 
.RE
.PP
\fBReturns:\fP
.RS 4
On success: \fBXY_TRUE\fP. On failure, \fBXY_FALSE\fP, and sets error code to one of the following: 
.PD 0

.IP "\(bu" 2
\fBXY_ERR_LINES_INVALID\fP 
.IP "\(bu" 2
\fBXY_ERR_MEM_CANT_ALLOC\fP 
.PP
.RE
.PP

.SS "\fBXY_bool\fP XY_start_lines (\fBXY_lines\fP * lines)"
.PP
Reset a line collection so that it contains no lines. 
.PP
This allows you to reconstruct a line collection (without making a new one) at different times (e.g., at the start of a new frame).
.PP
\fBParameters:\fP
.RS 4
\fIlines\fP is an \fBXY_lines\fP pointer to reset. 
.RE
.PP
\fBReturns:\fP
.RS 4
On success: \fBXY_TRUE\fP. On failure, \fBXY_FALSE\fP, and sets error code to one of the following: 
.PD 0

.IP "\(bu" 2
\fBXY_ERR_LINES_INVALID\fP 
.PP
.RE
.PP

.SS "\fBXY_bool\fP XY_add_line (\fBXY_lines\fP * lines, \fBXY_fixed\fP x1, \fBXY_fixed\fP y1, \fBXY_fixed\fP x2, \fBXY_fixed\fP y2, \fBXY_color\fP color, \fBXY_fixed\fP thickness)"
.PP
Add a line to a line collection. 
.PP
\fBParameters:\fP
.RS 4
\fIlines\fP is an \fBXY_lines\fP pointer to add a line to. 
.br
\fIx1\fP is the X coordinate of the new line's starting point. 
.br
\fIy1\fP is the Y coordinate of the new line's starting point. 
.br
\fIx2\fP is the X coordinate of the new line's ending point. 
.br
\fIy2\fP is the Y coordinate of the new line's ending point. 
.br
\fIcolor\fP is an \fBXY_color\fP representing the color and transparency of the new line. 
.br
\fIthickness\fP is an \fBXY_fixed\fP representing the thickness of the new line. 
.RE
.PP
\fBReturns:\fP
.RS 4
On success: \fBXY_TRUE\fP. On failure, \fBXY_FALSE\fP, and sets error code to one of the following: 
.PD 0

.IP "\(bu" 2
\fBXY_ERR_LINES_INVALID\fP 
.IP "\(bu" 2
\fBXY_ERR_MEM_CANT_ALLOC\fP 
.PP
.RE
.PP

.SS "\fBXY_bool\fP XY_translate_lines (\fBXY_lines\fP * lines, \fBXY_fixed\fP x, \fBXY_fixed\fP y)"
.PP
Translate all lines within a collection. 
.PP
\fBParameters:\fP
.RS 4
\fIlines\fP is an \fBXY_lines\fP pointer containing a collection of lines to translate. 
.br
\fIx\fP is the offset (positive for right, negative for left) by which to translate all of the lines horizontally. 
.br
\fIy\fP is the offset (positive for down, negative for up) by which to translate all of the lines vertically. 
.RE
.PP
\fBReturns:\fP
.RS 4
On success: \fBXY_TRUE\fP. On failure, \fBXY_FALSE\fP, and sets error code to one of the following: 
.PD 0

.IP "\(bu" 2
\fBXY_ERR_LINES_INVALID\fP 
.PP
.RE
.PP

.SS "\fBXY_bool\fP XY_scale_lines (\fBXY_lines\fP * lines, \fBXY_fixed\fP xscale, \fBXY_fixed\fP yscale)"
.PP
Scale all lines within a collection (centered around the origin (0,0)). 
.PP
\fBParameters:\fP
.RS 4
\fIlines\fP is an \fBXY_lines\fP pointer containing a collection of lines to scale. 
.br
\fIxscale\fP is the scale to change all of the lines' X coordinates. 
.br
\fIyscale\fP is the scale to change all of the lines' Y coordinates. 
.RE
.PP
\fBReturns:\fP
.RS 4
On success: \fBXY_TRUE\fP. On failure, \fBXY_FALSE\fP, and sets error code to one of the following: 
.PD 0

.IP "\(bu" 2
\fBXY_ERR_LINES_INVALID\fP 
.PP
.RE
.PP

.SS "\fBXY_bool\fP XY_rotate_lines (\fBXY_lines\fP * lines, int angle)"
.PP
Rotate all lines within a collection (centered around the origin (0,0)). 
.PP
\fBParameters:\fP
.RS 4
\fIlines\fP is an \fBXY_lines\fP pointer containing a collection of lines to scale. 
.br
\fIangle\fP is angle (in degrees) to rotate each line in the collection. 
.RE
.PP
\fBReturns:\fP
.RS 4
On success: \fBXY_TRUE\fP. On failure, \fBXY_FALSE\fP, and sets error code to one of the following: 
.PD 0

.IP "\(bu" 2
\fBXY_ERR_LINES_INVALID\fP 
.PP
.RE
.PP
\fBTodo\fP
.RS 4
Implement line rotation 
.RE
.PP

